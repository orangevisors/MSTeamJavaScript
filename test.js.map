{"version":3,"file":"test.js","sources":["../src/test.ts"],"sourcesContent":["import test from 'ava';\nimport '@k2oss/k2-broker-core/test-framework';\nimport './index';\n\n\n//\n// WARNING: any tests that use this mock() must be run serially\n// (using test.serial()), because they modify global  !\nfunction mock(name: string, value: any) \n{\n    global[name] = value;\n}\n\n// helper method to pass the data which is dynamic to each test into the mocked XHR class object.\n// uses mock() so must only be used in test.serial()'y run tests\nfunction mockXHR(data){\n    let xhr: {[key:string]: any} = null;\n    class XHR {\n        public onreadystatechange: () => void;\n        public readyState: number;\n        public status: number;\n        public responseText: string;\n        private recorder: {[key:string]: any};\n\n        constructor() {\n            xhr = this.recorder = {};\n            this.recorder.headers = {};\n        }\n\n        open(method: string, url: string) {\n            this.recorder.opened = {method, url};\n        }\n\n        setRequestHeader(key: string, value: string) {\n            this.recorder.headers[key] = value;\n        }\n\n        send() {\n            queueMicrotask(() =>\n            {\n                this.readyState = 4;\n                this.status = 200;\n                // this.responseText = JSON.stringify({\n                //     \"id\": 4321,\n                //     \"requestStatusUrl\": undefined,\n                //     \"isSuccessful\": true\n                // });\n                this.responseText = JSON.stringify(data);\n                this.onreadystatechange();\n                delete this.responseText;\n            });\n        }\n    }\n\n    mock('XMLHttpRequest', XHR);\n}\n\ntest('onexecute fails for invalid object', t => {\n    t.throws(function () {\n        let obj = 'invalidObject';\n        onexecute(obj, '', {}, {});\n    });\n});\n\n//\n// // example of how to catch a throw exception\n// const promise = () => Promise.reject(new Error('TEST'));\n// test('rejects', async t => {\n//     const error = await t.throwsAsync(promise);\n//     t.is(error.message, 'TEST');\n// });\n\ntest.serial('onexecuteTeamArchive succeeds', async t => {\n    //\n    // note: inputs/outputs found index.ts ondescribe \"postSchema()\" method\n\n    let validObject = Team;\n    let method = TeamArchive;\n\n    let data = {\n        [TeamId]: 1234\n    };\n    mockXHR(data);\n\n    let result: any = null;\n    function pr(r: any) {\n        result = r;\n    }\n\n    mock('postResult', pr);\n\n    await onexecute(validObject, method, {}, data);\n\n    // t.deepEqual(xhr, {\n    //     opened: {\n    //         method: 'GET',\n    //         url: 'https://jsonplaceholder.typicode.com/todos/123'\n    //     },\n    //     headers: {\n    //         'test': 'test value'\n    //     }\n    // });\n\n    t.deepEqual(result, {\n        [TeamId]: 1234,\n        [TeamRequestStatusUrl]: undefined,\n        [TeamIsSuccessful]: true\n    });\n\n    t.pass();\n});\n\ntest.serial('onexecuteTeamUnarchive succeeds', async t => {\n    //\n    // note: inputs/outputs found index.ts ondescribe \"postSchema()\" method\n\n    let teamId = 4321;\n    let validObject = Team;\n    let method = TeamUnarchive;\n\n    let data = {\n        [TeamId]: teamId\n    };\n    mockXHR(data);\n\n    let result: any = null;\n    function pr(r: any) { result = r;  }\n    mock('postResult', pr);\n\n    await onexecute(validObject, method, {}, data);\n\n    t.deepEqual(result, {\n        [TeamId]: teamId,\n        [TeamRequestStatusUrl]: undefined,\n        [TeamIsSuccessful]: true\n    });\n\n    t.pass();\n});\n\ntest.serial('onexecuteTeamClone succeeds', async t => {\n    //\n    // note: inputs/outputs found index.ts ondescribe \"postSchema()\" method\n\n    let validObject = Team;\n    let method = TeamClone;\n\n    let teamId = 999;\n    let data = {\n        [TeamId]: teamId,\n        [TeamDisplayName]: \"SomeName\",\n        [TeamDescription]: \"SomeDescription\",\n        [TeamMailNickname]: \"SomeMailNickname\"\n    };\n    mockXHR(data);\n\n    let result: any = null;\n    function pr(r: any) { result = r;  }\n    mock('postResult', pr);\n\n    await onexecute(validObject, method, {}, data);\n\n    t.deepEqual(result,{\n        [TeamId]: teamId,\n        [TeamRequestStatusUrl]: undefined,\n        [TeamIsSuccessful]: true\n    });\n\n    t.pass();\n});\n\ntest.serial('onexecuteTeamUpdate succeeds', async t => {\n    //\n    // note: inputs/outputs found index.ts ondescribe \"postSchema()\" method\n\n    let validObject = Team;\n    let method = TeamUpdate;\n\n    let teamId = 555;\n    let data = {\n        [TeamId]: teamId,\n        [TeamMsAllowCreateUpdateChannels]: true,\n        [TeamMsAllowDeleteChannels]: true,\n        [TeamMsAllowAddRemoveApps]: true,\n        [TeamMsAllowCreateUpdateRemoveTabs]: true,\n        [TeamMsAllowCreateUpdateRemoveConnectors]: true,\n        [TeamGsAllowCreateUpdateChannels]: true,\n        [TeamGsAllowDeleteChannels]: true,\n        [TeamMsgAllowUserEditMessages]: true,\n        [TeamMsgAllowUserDeleteMessages]: true,\n        [TeamMsgAllowTeamMentions]: true,\n        [TeamMsgAllowChannelMentions]: true,\n        [TeamFsAllowGiphy]: true,\n        [TeamFsAllowStickersAndMemes]: true,\n        [TeamFsAllowCustomMemes]: true\n    };\n    mockXHR(data);\n\n    let result: any = null;\n    function pr(r: any) { result = r;  }\n    mock('postResult', pr);\n\n    await onexecute(validObject, method, {}, data);\n\n    t.deepEqual(result,{\n        [TeamIsSuccessful]: true\n    });\n\n    t.pass();\n});\n\ntest.serial('onexecuteChannelUpdate succeeds', async t => {\n    //\n    // note: inputs/outputs found index.ts ondescribe \"postSchema()\" method\n\n    let validObject = Channel;\n    let method = ChannelUpdate;\n\n    let channelId = 777;\n    let teamId = 888;\n    let data = {\n        [ChannelId]: channelId,\n        [ChannelTeamId]: teamId,\n        [ChannelDisplayName]: \"SomeName\",\n        [ChannelDescription]: \"SomeDescription\"\n    };\n    mockXHR(data);\n\n    let result: any = null;\n    function pr(r: any) { result = r;  }\n    mock('postResult', pr);\n\n    await onexecute(validObject, method, {}, data);\n\n    t.deepEqual(result,{\n        [ChannelIsSuccessful]: true\n    });\n\n    t.pass();\n});\n\ntest.serial('onexecuteChannelDelete succeeds', async t => {\n    //\n    // note: inputs/outputs found index.ts ondescribe \"postSchema()\" method\n\n    let validObject = Channel;\n    let method = ChannelDelete;\n\n    let channelId = 345;\n    let teamId = 100;\n    let data = {\n        [ChannelId]: channelId,\n        [ChannelTeamId]: teamId\n    };\n    mockXHR(data);\n\n    let result: any = null;\n    function pr(r: any) { result = r;  }\n    mock('postResult', pr);\n\n    await onexecute(validObject, method, {}, data);\n\n    t.deepEqual(result,{\n        [ChannelIsSuccessful]: true\n    });\n\n    t.pass();\n});\n\ntest.serial('onexecuteSendMessage (of a Channel) succeeds', async t => {\n    //\n    // note: inputs/outputs found index.ts ondescribe \"postSchema()\" method\n\n    let validObject = Channel;\n    let method = ChannelSendMessage;\n\n    let channelId = 345;\n    let teamId = 100;\n    let data = {\n        [ChannelId]: channelId,\n        [ChannelTeamId]: teamId,\n        [ChannelMessageSubject]: \"subject\",\n        [ChannelMessageBody]: \"body\",\n        [ChannelMessageIsImportant]: true\n    };\n    mockXHR(data);\n\n    let result: any = null;\n    function pr(r: any) { result = r;  }\n    mock('postResult', pr);\n\n    await onexecute(validObject, method, {}, data);\n\n    t.deepEqual(result,{\n        [ChannelIsSuccessful]: true\n    });\n\n    t.pass();\n});"],"names":["mock","name","value","global","mockXHR","data","constructor","this","recorder","headers","open","method","url","opened","setRequestHeader","key","send","queueMicrotask","readyState","status","responseText","JSON","stringify","onreadystatechange","test","t","throws","onexecute","serial","async","validObject","Team","TeamArchive","[object Object]","TeamId","result","r","deepEqual","TeamRequestStatusUrl","undefined","TeamIsSuccessful","pass","TeamUnarchive","TeamClone","TeamDisplayName","TeamDescription","TeamMailNickname","TeamUpdate","TeamMsAllowCreateUpdateChannels","TeamMsAllowDeleteChannels","TeamMsAllowAddRemoveApps","TeamMsAllowCreateUpdateRemoveTabs","TeamMsAllowCreateUpdateRemoveConnectors","TeamGsAllowCreateUpdateChannels","TeamGsAllowDeleteChannels","TeamMsgAllowUserEditMessages","TeamMsgAllowUserDeleteMessages","TeamMsgAllowTeamMentions","TeamMsgAllowChannelMentions","TeamFsAllowGiphy","TeamFsAllowStickersAndMemes","TeamFsAllowCustomMemes","Channel","ChannelUpdate","ChannelId","ChannelTeamId","ChannelDisplayName","ChannelDescription","ChannelIsSuccessful","ChannelDelete","ChannelSendMessage","ChannelMessageSubject","ChannelMessageBody","ChannelMessageIsImportant"],"mappings":"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"}